%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 9.0%%For: (Mark Jones) (Doggett and Jones)%%Title: (EPSRC2PMS.eps)%%CreationDate: 15/10/04 10:03 AM%%BoundingBox: -92 -146 268 -25%%HiResBoundingBox: -91.8433 -145.3682 267.1533 -25.5107%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%DocumentCustomColors: (PANTONE 222 CVC)%%+ (PANTONE 3272 CVC)%%CMYKCustomColor: 0.6 1 0.5 0 (PANTONE 222 CVC)%%+ 1 0 0.5 0 (PANTONE 3272 CVC)%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 131071 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 55.9873 -79.6797 55.9873 -79.6797%AI3_TileBox: -342.0122 -360.1787 454.9873 199.8213%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 841.8898 595.2756%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 300%AI5_NumLayers: 3%AI8_OpenToView: -192.4521 107.7534 1.967 1146 827 18 1 1 7 40 0 0%AI5_OpenViewLayers: 767%%PageOrigin:-342.0122 -360.1787%%AI3_PaperRect:-23 577 819 -18%%AI3_Margin:23 -17 -22 18%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI7_Thumbnail: 128 44 8%%BeginData: 5864 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD21FF121312131213121312131213121312131213121312131213%121312131213121312131213121312131213121312131213121312131213%1213121312131235FD42FFAE84AE84AE84AE84AE84AE84AE84AE84AE84AE%84AE84AE84AE84AE84AE84AE84AE84AE84AE84AE84AE84AE84AE84AE84AE%84AE84AE84AE84AE84AE84AEA8FDC2FFA8769B7677769B767777FFFFA876%9B7677769B76A1A8FD05FF7D764B704C77A1FFFFFFA19B7677769B767777%FD08FFA17070457070A8FD43FF456A4546456A45464570FFFF776A454645%6A45464570A8FFFFFF7046456A4546456A70FFFFA14546456A4546456A45%A8FD04FFA8704546456A4546459BFD41FFA14545454C9B769B769B77FFFF%9B4545459B76774545454CCAFF7045459BA1CBA177459BFFFF7645454576%9B70FD0445FFFFFFA8FD0445A1A2CA7645A8FD41FFCA454545A1FD08FF77%454546FFFFFFA1454545A8FF454570FD05FFCAA8FFFF9B454645FFFFFFA1%454546A1FFFF70454545FD48FFA145454576FD08FF9B454545FFFFFFA145%454576FF4545459BFD08FF76454545FFFFFFCA4545459BFFA1454545A8FD%48FFCA454645A1FD08FF7746456AFFFFFFA1454645A8FF70456A4570A1FD%06FFA1456A45FFFFFFA146456AA1FF706A4570FD49FFA2704C454B9B769B%769BA8FFFFA14C4C459B7676FD0445A8FF76FD06459BFD04FFA170454576%9B70FD0445FFFF4545454CFD4CFF70454546454545CAFD04FFCA45454645%454570A8FFFFFF7645454645454570FD06FF45464545454645CAFFFF4545%459BFD49FFA87045454C77769B7677A8FFFFA14B704577769B7DA8FD06FF%A876FD054570FFFF7770FD0645A1FD04FF4545454BFD49FFCA456A45A1FD%08FF776A4546FD0EFF7770456A45FFFFA14546459B45464570FD04FF7046%4570FD49FFA145454576FD08FF9B454545FD0FFFA8454545A1FF76454545%A8704545459BFFFFFFA14545459BFD48FFCA454545A1FD08FF77454546FD%09FF9BCAFD05FF454545FFFF9B454645FFA146454545CAFFFFFF70454545%A2FD04FFA1FD42FFA1FD0445704C704B7076FFFF9B454545FD08FFA24545%709BA17745454577FFFF76454545FFFF70FD0445FFFFFFA24645454576A1%A14B4576FD42FF4546456A4546456A4570FFFF7746456AFD08FFA170456A%4546456A459BFFFFFFA1456A45FFFFFF7046456A70FD04FF77456A454645%6A4576FD42FFCB769B769B769B769BA1FFFFA8769B76FD0AFFA276764C76%77CBFD04FFA19B769BFFFFFFCA769B769BA8FD04FFCA77764C7076CAFDC3%FF845F845F835F845F835F845F835F845F835F845F835F845F835F845F83%5F845F835F845F835F845F835F845F835F845F835F845F835F845F835F84%5F8383FD41FFAF1213121312131213121312131213121312131213121312%131213121312131213121312131213121312131213121312131213121312%13121312131213123BFDFCFFFDFCFFFDFCFFFDADFFA177A1CAFD09FFCAA1%FD12FFA2A8FD18FF7770FFFFCAA177A1FF7077FD0BFF77FD09FFA270FFFF%FFCA77A1CAFD05FF77FD16FF45A8A1FD0BFFA1FD12FFA8A2FD18FF9B4CFF%FFA845CA7077709BFD0BFFA8FD09FFA84CFFFFFF45A276A8FD04FFCAA2FD%16FF46A2A8FF46764570FFA8704570A270FF46764570FF764C4BA2A87070%70FF704570779BA1707045A1FF7770459BFFFF777045CA7670454CA1CA4C%704B76FFFFA146FF9B76A1707045A145FFA87077704BFF45CAA170459BA1%7045A8A170FFFFCA7070FFFFCA45704BA870FF707045A27670454CA1CA45%704BCA45704BFF767070459B76FF45A27645FF46A17076A84CFF45CA7645%A14570704B70457745A14C76FF9B76A845FF45707746A145A8FFFFA8A270%767745FF45774C9BFF7770FFFFA8457076FF7676A84576707777777070CA%FF45FF4570FFA8CAA87076A84BFFFFFFA17045A14B70A8CAA1707D457070%4C774BCA45774B70A8CA7045764C767070CA6AFFFFFF6ACAFF45FF7670A1%FFA270FF6AFFCA45CA45CAA2CA7077A2CACA70A1FF77A1A270FFA170FF45%76A8FFFFFF779B70A1779BFFA177709BFF7670FFFFA26AFFFFFF7077FF70%A1A1704CFFFF764CFF45FF45FFFFFFA19B769BA270FFFFCAFFFF70707077%FFFFCA70A145CAA2CA77A1FF9B777077FFFF9B70CAA2FFFF704C459B70A8%45CAFF45FF70457077A84CFF45FFA145A8704C7676A245764BCA4CA8FF9B%76A14BFF7670A84C4570A1FFFF764570459B70FF769BA14C76704BFFFFA8%45FFFFFF4B9BFF7076FF45A1FF70764CA845A176459B76A1457045A84BFF%FFA8457745A2A14C7670A170CA4C4B70A19B76FF709BA14C7670A14C7070%A2707645FD09FF45A17645FD09FFCAFD04FFA8FD0CFFA14BA84C76FD0CFF%CAFD0FFFCA70FFFFFFCAFD06FFA8FD0BFFA1FFFFFFCACAFD05FFA8FD08FF%CACAFFFFCACAFFFFFFCAFD09FFA8454B7070FD1BFF76457046A1FD1CFF77%76FD3EFFCACACAFD1DFFA8CAFD12FFA8FD21FFA8FD3FFF9B70704BCBFD18%FF769BFD06FFA1704B4C70FD14FF70A870A1FD3EFF76A1CA7076FFA2A8CA%FFA8A8CAFFA8A8A8FFFFA8CAFFA8CAA1FFA2A8A8A177CAA1FFFFFFA170FF%FFCAA2FFFFA1CAFFFFA8FFFD04CAFFA8CAFFCAA8A1FFA2FF70CAFD3EFF77%4B9B45A84B70774CA2467DA176457D4CA8707045A8704577704576707670%704577FFFF7070FD04FFA245A87077A170FF9B4CA845774570A846457077%45FF70A1FD3EFF777745A1FF6A76A170FF7077FF7070A170CAA87745CA70%A1FF6A9BFFFFA176FF45A1FFFF7077FD04FF70A1FFCA45CA45FF779BA270%FFA170A145FFFFFF45FF70CAFD3EFF9B70A845A245A1FFA1A8CB45707077%FFA8A170A14CA170A1FF45A1FFFF769BFF7076FFFFA845A8FFCA767770FF%7770A145777676A84BFFA1707770FFFFA845FF70A1FD3EFFA19BFFA170A2%70769BA87076A2CA707676FF7676769B76A8FFCA709B77A1A1FF76A1FFFF%FFA2709B70A1CA767777A8FF707676A1A876FFCA76FF767770FF70FF76CA%FD9EFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) Pc0.6 1 0.5 0 (PANTONE 222 CVC) 0 x(PANTONE 222 CVC) Pc1 0 0.5 0 (PANTONE 3272 CVC) 0 x(PANTONE 3272 CVC) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 0 0 0 1 0 79 128 255 0 100 Lb(Background) Ln0 ALB%AI5_EndLayer--%AI5_BeginLayer0 1 1 1 0 0 0 0 79 128 255 0 100 Lb(Guides) Ln0 A0 J 0 j 1 w 3.8637 M []0 d1 XR-185.687 -500.6797 m-185.687 341.2104 L(N) *-359.7764 -500.6797 m-359.7764 341.2104 L(N) *448.5684 -500.6797 m448.5684 341.2104 L(N) *234.3018 -500.6797 m234.3018 341.2104 L(N) *LB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Foreground) Ln0 A*u300 Ar0 O0.6 1 0.5 0 (PANTONE 222 CVC) 0 x0 J 0 j 1 w 4 M []0 d0 XR-83.5918 -112.0801 m-83.6396 -112.3213 -83.688 -112.5176 -83.688 -112.8242 c-83.688 -113.0645 -83.6157 -113.2617 -83.5918 -113.502 c-84.8428 -113.3486 -86.2861 -113.2832 -87.3203 -113.2832 c-87.9702 -113.2832 -88.6675 -113.3047 -89.269 -113.3271 c-89.293 -114.2676 -89.3174 -115.251 -89.3174 -116.1914 c-89.3174 -117.3291 -89.269 -118.9912 -89.2451 -119.5811 c-87.7056 -119.5811 -85.7568 -119.5811 -82.918 -119.3193 c-82.9663 -119.5596 -83.0142 -119.7568 -83.0142 -120.0625 c-83.0142 -120.3691 -82.9663 -120.5439 -82.918 -120.7627 c-84.0249 -120.6309 -85.1553 -120.6309 -86.2622 -120.6309 c-88.1143 -120.6309 -89.9907 -120.6973 -91.8433 -120.7627 c-91.6987 -119.1221 -91.5786 -117.7012 -91.5786 -112.9336 c-91.5786 -110.7461 -91.6265 -107.7939 -91.771 -105.6504 c-90.0869 -105.7822 -88.4272 -105.7822 -86.7432 -105.7822 c-85.5161 -105.7822 -84.3135 -105.7598 -83.0864 -105.6504 c-83.1348 -105.8916 -83.1826 -106.1318 -83.1826 -106.416 c-83.1826 -106.7227 -83.1348 -106.8975 -83.0864 -107.1162 c-83.9766 -106.9629 -84.8184 -106.8311 -86.9116 -106.8311 c-87.7773 -106.8311 -88.2104 -106.8311 -89.2451 -106.875 c-89.293 -107.7285 -89.293 -108.0996 -89.293 -109.3906 c-89.293 -110.8115 -89.293 -111.0742 -89.269 -112.2334 c-87.3687 -112.2549 -85.4683 -112.2773 -83.5918 -112.0801 cf*U*u-80.1758 -110.0898 m-79.7427 -110.1563 -79.4297 -110.2217 -78.9727 -110.2217 c-78.5156 -110.2217 -78.2031 -110.1563 -77.7939 -110.0898 c-77.8179 -110.418 -77.8901 -111.8613 -77.9146 -112.168 c-77.2891 -111.1396 -75.9658 -110.0244 -73.6802 -110.0244 c-69.7349 -110.0244 -69.5425 -112.583 -69.5425 -113.8301 c-69.5425 -114.0488 -69.6387 -117.7441 -69.6387 -118.4883 c-69.6387 -118.9033 -69.6147 -120.4346 -69.5664 -120.7627 c-69.9033 -120.6748 -70.1919 -120.6309 -70.7935 -120.6309 c-71.4189 -120.6309 -71.7075 -120.6748 -72.0684 -120.7627 c-71.8521 -118.4229 -71.8521 -116.0166 -71.8521 -115.623 c-71.8521 -113.4365 -71.9722 -111.3584 -74.6426 -111.3584 c-75.9175 -111.3584 -76.9277 -111.8838 -77.5054 -112.8672 c-77.9385 -113.6328 -77.9385 -116.1045 -77.9385 -117.1318 c-77.9385 -118.8379 -77.8179 -119.9531 -77.7461 -120.7627 c-78.0825 -120.6973 -78.4678 -120.6309 -79.021 -120.6309 c-79.5742 -120.6309 -79.9351 -120.6973 -80.2959 -120.7627 c-80.1758 -119.4287 -80.0552 -118.0283 -80.0552 -114.748 c-80.0552 -113.3047 -80.1274 -111.6211 -80.1758 -110.0898 cf*U*u-61.6763 -116.2354 m-63.0474 -116.2354 -64.1782 -115.4482 -64.1782 -113.6113 c-64.1782 -112.7803 -63.9614 -110.7246 -61.5562 -110.7246 c-60.3052 -110.7246 -58.958 -111.4463 -58.958 -113.3486 c-58.958 -114.5518 -59.4868 -116.2354 -61.6763 -116.2354 cf1 D-66.4634 -113.5459 m-66.4634 -114.8799 -65.79 -116.0391 -64.1299 -116.6074 c-64.5391 -116.6943 -66.0786 -117.2852 -66.0786 -118.75 c-66.0786 -119.3408 -65.8623 -120.1719 -64.2983 -120.5654 c-64.8037 -120.7402 -66.9448 -121.4189 -66.9448 -123.4307 c-66.9448 -124.874 -65.7178 -126.6895 -61.8447 -126.6895 c-56.7686 -126.6895 -55.4937 -123.5615 -55.4937 -121.9873 c-55.4937 -121.1348 -55.8545 -120.4121 -56.4561 -119.9316 c-56.9609 -119.5156 -57.6826 -119.1221 -59.7275 -119.0781 c-59.9683 -119.0781 -61.1709 -119.1006 -61.4355 -119.1006 c-64.082 -119.1006 -64.2505 -118.5322 -64.2505 -117.9414 c-64.2505 -117.416 -63.8896 -116.8916 -63.1919 -116.8916 c-63.1436 -116.8916 -61.7725 -116.9795 -61.5078 -116.9795 c-58.7651 -116.9795 -56.6724 -115.7109 -56.6724 -113.3926 c-56.6724 -112.4521 -57.1055 -111.752 -57.6826 -111.293 c-57.0093 -111.293 -56.0952 -111.293 -55.4697 -111.3369 c-55.4937 -111.1396 -55.542 -110.9648 -55.542 -110.7686 c-55.542 -110.5928 -55.4937 -110.3965 -55.4697 -110.2217 c-56.6484 -110.3086 -56.8887 -110.3086 -57.6587 -110.3086 c-58.5972 -110.3086 -58.8857 -110.2871 -60.1606 -110.0898 c-60.7139 -110.0029 -61.2192 -109.9805 -61.7725 -109.9805 c-64.3467 -109.9805 -66.4634 -111.2275 -66.4634 -113.5459 cf0 D-61.3394 -125.793 m-63.6006 -125.793 -65.1406 -124.8086 -65.1406 -123.1904 c-65.1406 -120.6748 -61.9648 -120.6748 -61.3877 -120.6748 c-59.8721 -120.6748 -57.4902 -121.0029 -57.4902 -123.0371 c-57.4902 -124.502 -58.8374 -125.793 -61.3394 -125.793 cf*U*u-53.0156 -110.1777 m-52.6792 -110.2656 -52.3906 -110.3086 -51.8369 -110.3086 c-51.2837 -110.3086 -50.9468 -110.2656 -50.5859 -110.1777 c-50.6582 -111.3809 -50.7305 -112.3643 -50.7305 -115.9297 c-50.7305 -116.9355 -50.7065 -117.3066 -50.562 -120.7627 c-50.875 -120.6748 -51.1152 -120.6309 -51.7407 -120.6309 c-52.4146 -120.6309 -52.6309 -120.6748 -52.9917 -120.7627 c-52.8955 -119.1006 -52.8232 -116.9131 -52.8232 -115.208 c-52.8232 -112.7148 -52.9194 -111.3145 -53.0156 -110.1777 cf-51.7407 -107.7715 m-52.4385 -107.7715 -53.04 -107.2471 -53.04 -106.5908 c-53.04 -105.9131 -52.4385 -105.3877 -51.7407 -105.3877 c-51.019 -105.3877 -50.4175 -105.9131 -50.4175 -106.5908 c-50.4175 -107.2471 -51.019 -107.7715 -51.7407 -107.7715 cf*U*u-46.8574 -110.0898 m-46.4243 -110.1563 -46.1118 -110.2217 -45.6543 -110.2217 c-45.1973 -110.2217 -44.8848 -110.1563 -44.4756 -110.0898 c-44.5 -110.418 -44.5718 -111.8613 -44.5962 -112.168 c-43.9707 -111.1396 -42.6475 -110.0244 -40.3618 -110.0244 c-36.4165 -110.0244 -36.2241 -112.583 -36.2241 -113.8301 c-36.2241 -114.0488 -36.3203 -117.7441 -36.3203 -118.4883 c-36.3203 -118.9033 -36.2964 -120.4346 -36.2485 -120.7627 c-36.585 -120.6748 -36.874 -120.6309 -37.4751 -120.6309 c-38.1006 -120.6309 -38.3892 -120.6748 -38.75 -120.7627 c-38.5337 -118.4229 -38.5337 -116.0166 -38.5337 -115.623 c-38.5337 -113.4365 -38.6538 -111.3584 -41.3242 -111.3584 c-42.5991 -111.3584 -43.6099 -111.8838 -44.187 -112.8672 c-44.6201 -113.6328 -44.6201 -116.1045 -44.6201 -117.1318 c-44.6201 -118.8379 -44.5 -119.9531 -44.4277 -120.7627 c-44.7646 -120.6973 -45.1494 -120.6309 -45.7026 -120.6309 c-46.2559 -120.6309 -46.6167 -120.6973 -46.9775 -120.7627 c-46.8574 -119.4287 -46.7368 -118.0283 -46.7368 -114.748 c-46.7368 -113.3047 -46.8091 -111.6211 -46.8574 -110.0898 cf*U*u-31.1006 -114.5293 m-30.8838 -112.3428 -29.8735 -110.8994 -27.7803 -110.8994 c-24.8936 -110.8994 -24.8936 -113.8076 -24.8936 -114.5293 c-31.1006 -114.5293 Lf1 D-22.4878 -115.4482 m-22.4639 -114.2676 -22.3916 -110.0244 -27.7563 -110.0244 c-31.7017 -110.0244 -33.5303 -112.5615 -33.5303 -115.5791 c-33.5303 -118.9473 -31.293 -121.0469 -27.6362 -121.0469 c-25.6875 -121.0469 -24.2202 -120.5439 -23.1616 -119.625 c-23.1377 -119.2754 -23.1377 -118.9258 -22.9932 -118.3135 C-23.2817 -118.2471 l-23.6426 -118.707 -24.7495 -120.0186 -27.1069 -120.0186 c-27.8047 -120.0186 -29.3682 -119.9531 -30.4751 -118.3135 c-31.1245 -117.3066 -31.1245 -116.0605 -31.1245 -115.4482 c-22.4878 -115.4482 Lf*U*u0 D-18.2061 -114.5293 m-17.9893 -112.3428 -16.979 -110.8994 -14.8862 -110.8994 c-11.9995 -110.8994 -11.9995 -113.8076 -11.9995 -114.5293 c-18.2061 -114.5293 Lf1 D-9.5938 -115.4482 m-9.5693 -114.2676 -9.4976 -110.0244 -14.8623 -110.0244 c-18.8076 -110.0244 -20.6357 -112.5615 -20.6357 -115.5791 c-20.6357 -118.9473 -18.3984 -121.0469 -14.7417 -121.0469 c-12.793 -121.0469 -11.3257 -120.5439 -10.2671 -119.625 c-10.2432 -119.2754 -10.2432 -118.9258 -10.0986 -118.3135 C-10.3877 -118.2471 l-10.7485 -118.707 -11.855 -120.0186 -14.2124 -120.0186 c-14.9102 -120.0186 -16.4741 -119.9531 -17.5806 -118.3135 c-18.23 -117.3066 -18.23 -116.0605 -18.23 -115.4482 c-9.5938 -115.4482 Lf*U*u0 D-0.356 -112.168 m-0.6685 -112.0146 -0.9575 -111.8838 -1.6069 -111.8838 c-2.978 -111.8838 -3.7236 -112.7148 -3.9644 -113.1299 c-4.3013 -113.8076 -4.3491 -114.2891 -4.3491 -116.9795 c-4.3491 -117.1973 -4.3491 -117.9414 -4.3252 -118.4004 c-4.229 -119.9316 -4.229 -120.085 -4.2051 -120.7627 c-4.5659 -120.6748 -4.8784 -120.6309 -5.5039 -120.6309 c-6.0815 -120.6309 -6.3462 -120.6748 -6.707 -120.7627 c-6.5386 -119.3408 -6.4424 -118.5977 -6.4424 -115.1855 c-6.4424 -112.7148 -6.5386 -111.5117 -6.6348 -110.0898 c-6.2739 -110.1777 -5.937 -110.2217 -5.4077 -110.2217 c-4.8784 -110.2217 -4.5659 -110.1777 -4.1812 -110.0898 c-4.3735 -111.293 -4.3735 -112.168 -4.3735 -112.5615 c-3.9644 -111.6865 -2.834 -109.8057 -0.019 -110.0244 c-0.1152 -110.3525 -0.2354 -110.79 -0.2354 -111.4463 c-0.2354 -111.5771 -0.2354 -111.708 -0.1875 -112.0586 C-0.356 -112.168 lf*U*u2.314 -110.1777 m2.6509 -110.2656 2.9395 -110.3086 3.4932 -110.3086 c4.0464 -110.3086 4.3828 -110.2656 4.7441 -110.1777 c4.6719 -111.3809 4.5996 -112.3643 4.5996 -115.9297 c4.5996 -116.9355 4.6235 -117.3066 4.7681 -120.7627 c4.4551 -120.6748 4.2148 -120.6309 3.5894 -120.6309 c2.9155 -120.6309 2.6992 -120.6748 2.3384 -120.7627 c2.4346 -119.1006 2.5068 -116.9131 2.5068 -115.208 c2.5068 -112.7148 2.4102 -111.3145 2.314 -110.1777 cf3.5894 -107.7715 m2.8916 -107.7715 2.29 -107.2471 2.29 -106.5908 c2.29 -105.9131 2.8916 -105.3877 3.5894 -105.3877 c4.311 -105.3877 4.9121 -105.9131 4.9121 -106.5908 c4.9121 -107.2471 4.311 -107.7715 3.5894 -107.7715 cf*U*u8.4727 -110.0898 m8.9058 -110.1563 9.2183 -110.2217 9.6753 -110.2217 c10.1328 -110.2217 10.4453 -110.1563 10.8545 -110.0898 c10.8301 -110.418 10.7583 -111.8613 10.7339 -112.168 c11.3594 -111.1396 12.6826 -110.0244 14.9683 -110.0244 c18.9136 -110.0244 19.106 -112.583 19.106 -113.8301 c19.106 -114.0488 19.0098 -117.7441 19.0098 -118.4883 c19.0098 -118.9033 19.0337 -120.4346 19.0815 -120.7627 c18.7451 -120.6748 18.4561 -120.6309 17.855 -120.6309 c17.2295 -120.6309 16.9404 -120.6748 16.5801 -120.7627 c16.7964 -118.4229 16.7964 -116.0166 16.7964 -115.623 c16.7964 -113.4365 16.6763 -111.3584 14.0059 -111.3584 c12.731 -111.3584 11.7202 -111.8838 11.1431 -112.8672 c10.71 -113.6328 10.71 -116.1045 10.71 -117.1318 c10.71 -118.8379 10.8301 -119.9531 10.9023 -120.7627 c10.5654 -120.6973 10.1807 -120.6309 9.6274 -120.6309 c9.0742 -120.6309 8.7134 -120.6973 8.3525 -120.7627 c8.4727 -119.4287 8.5928 -118.0283 8.5928 -114.748 c8.5928 -113.3047 8.521 -111.6211 8.4727 -110.0898 cf*U*u26.9722 -116.2354 m25.6011 -116.2354 24.4702 -115.4482 24.4702 -113.6113 c24.4702 -112.7803 24.6865 -110.7246 27.0923 -110.7246 c28.3433 -110.7246 29.6904 -111.4463 29.6904 -113.3486 c29.6904 -114.5518 29.1611 -116.2354 26.9722 -116.2354 cf1 D22.1846 -113.5459 m22.1846 -114.8799 22.8584 -116.0391 24.5186 -116.6074 c24.1094 -116.6943 22.5698 -117.2852 22.5698 -118.75 c22.5698 -119.3408 22.7861 -120.1719 24.3501 -120.5654 c23.8447 -120.7402 21.7036 -121.4189 21.7036 -123.4307 c21.7036 -124.874 22.9307 -126.6895 26.8037 -126.6895 c31.8799 -126.6895 33.1548 -123.5615 33.1548 -121.9873 c33.1548 -121.1348 32.7939 -120.4121 32.1924 -119.9316 c31.6875 -119.5156 30.9658 -119.1221 28.9209 -119.0781 c28.6802 -119.0781 27.4775 -119.1006 27.2129 -119.1006 c24.5664 -119.1006 24.3979 -118.5322 24.3979 -117.9414 c24.3979 -117.416 24.7588 -116.8916 25.4565 -116.8916 c25.5049 -116.8916 26.876 -116.9795 27.1406 -116.9795 c29.8828 -116.9795 31.9761 -115.7109 31.9761 -113.3926 c31.9761 -112.4521 31.543 -111.752 30.9658 -111.293 c31.6392 -111.293 32.5532 -111.293 33.1787 -111.3369 c33.1548 -111.1396 33.1064 -110.9648 33.1064 -110.7686 c33.1064 -110.5928 33.1548 -110.3965 33.1787 -110.2217 c32 -110.3086 31.7593 -110.3086 30.9897 -110.3086 c30.0513 -110.3086 29.7627 -110.2871 28.4878 -110.0898 c27.9346 -110.0029 27.4292 -109.9805 26.876 -109.9805 c24.3018 -109.9805 22.1846 -111.2275 22.1846 -113.5459 cf0 D27.3091 -125.793 m25.0474 -125.793 23.5078 -124.8086 23.5078 -123.1904 c23.5078 -120.6748 26.6836 -120.6748 27.2607 -120.6748 c28.7764 -120.6748 31.1582 -121.0029 31.1582 -123.0371 c31.1582 -124.502 29.811 -125.793 27.3091 -125.793 cf*U*u47.2759 -117.7012 m47.2759 -118.9033 45.9526 -119.7783 44.7261 -119.7783 c43.8838 -119.7783 42.6812 -119.3633 42.6812 -117.9414 c42.6812 -116.7607 43.1382 -115.8633 47.2759 -115.2949 c47.2759 -117.7012 Lf1 D41.8872 -112.7578 m42.1035 -112.2988 42.6328 -111.1396 44.6299 -111.1396 c46.1934 -111.1396 47.3242 -112.0361 47.3242 -113.5234 c47.3242 -114.1357 47.1074 -114.4199 46.4341 -114.5732 C44.3408 -114.9893 l42.3926 -115.3828 40.3477 -115.7979 40.3477 -118.1162 c40.3477 -119.3193 41.1895 -121.0254 43.6675 -121.0254 c45.5439 -121.0254 46.5542 -120.1943 47.2998 -119.4941 c47.5645 -120.4785 48.3345 -120.916 49.1284 -120.916 c49.8018 -120.916 50.3311 -120.6748 50.8604 -120.4346 C50.8364 -119.8223 l50.7163 -119.8662 50.5234 -119.9316 50.2349 -119.9316 c49.3447 -119.9316 49.3447 -119.2969 49.3447 -117.373 c49.3447 -116.8037 49.4409 -114.0703 49.4409 -113.4365 c49.4409 -112.1025 49.0083 -111.4678 48.4546 -110.9863 c47.4927 -110.1777 46.1694 -110.0029 45.231 -110.0029 c43.2583 -110.0029 42.0796 -110.79 41.334 -111.3369 C41.2378 -112.7578 l41.8872 -112.7578 Lf*U*u0 D53.0254 -110.0898 m53.4585 -110.1563 53.7715 -110.2217 54.2285 -110.2217 c54.6855 -110.2217 54.998 -110.1563 55.4072 -110.0898 c55.3833 -110.418 55.311 -111.8613 55.2866 -112.168 c55.9121 -111.1396 57.2354 -110.0244 59.5205 -110.0244 c63.4658 -110.0244 63.6582 -112.583 63.6582 -113.8301 c63.6582 -114.0488 63.5625 -117.7441 63.5625 -118.4883 c63.5625 -118.9033 63.5869 -120.4346 63.6348 -120.7627 c63.2979 -120.6748 63.0088 -120.6309 62.4072 -120.6309 c61.7822 -120.6309 61.4932 -120.6748 61.1328 -120.7627 c61.3496 -118.4229 61.3496 -116.0166 61.3496 -115.623 c61.3496 -113.4365 61.2285 -111.3584 58.5586 -111.3584 c57.2832 -111.3584 56.2729 -111.8838 55.6958 -112.8672 c55.2627 -113.6328 55.2627 -116.1045 55.2627 -117.1318 c55.2627 -118.8379 55.3833 -119.9531 55.4551 -120.7627 c55.1187 -120.6973 54.7334 -120.6309 54.1802 -120.6309 c53.627 -120.6309 53.2661 -120.6973 52.9053 -120.7627 c53.0254 -119.4287 53.146 -118.0283 53.146 -114.748 c53.146 -113.3047 53.0737 -111.6211 53.0254 -110.0898 cf*U*u72.0059 -119.9756 m70.4424 -119.9756 68.71 -118.7725 68.71 -115.4697 c68.71 -114.748 68.71 -111.0742 72.1504 -111.0742 c73.209 -111.0742 74.3877 -111.4463 75.1816 -112.8018 c75.6387 -113.5889 75.7109 -114.4863 75.7109 -115.3604 c75.7109 -117.5254 75.1572 -118.3135 74.7246 -118.8379 c74.1953 -119.4941 73.3291 -119.9756 72.0059 -119.9756 cf1 D66.2324 -115.5791 m66.2324 -119.4502 69.1436 -121.0684 71.5732 -121.0684 c73.2568 -121.0684 74.8691 -120.3252 75.6631 -118.9912 c75.6631 -119.2969 75.6631 -119.9531 75.5908 -120.7627 c75.9277 -120.6973 76.2402 -120.6309 76.7695 -120.6309 c77.2988 -120.6309 77.5635 -120.6973 77.9004 -120.7627 c77.8516 -118.4883 77.8281 -116.082 77.8281 -113.8301 c77.8281 -110.7676 77.9004 -107.6846 78.0684 -104.623 c77.6836 -104.6885 77.3223 -104.7539 76.7451 -104.7539 c76.168 -104.7539 75.8789 -104.6885 75.542 -104.623 c75.6631 -106.7441 75.6631 -109.5215 75.6387 -111.9932 c75.2539 -111.0957 73.9785 -109.959 71.7178 -109.959 c68.5664 -109.959 66.2324 -112.124 66.2324 -115.5791 cf*U*u0 D95.4854 -109.7188 m95.4854 -113.0645 92.2617 -113.1738 89.8555 -113.1084 c89.832 -110.8115 89.832 -108.5811 89.8555 -106.7002 c90.3135 -106.6348 90.8662 -106.6133 91.251 -106.6133 c92.4785 -106.6133 93.8496 -106.875 94.667 -107.5752 c95.2686 -108.0996 95.4854 -108.8652 95.4854 -109.7188 cf1 D98.1074 -109.5 m98.1074 -108.0342 97.3379 -106.8311 95.8701 -106.1973 c94.7158 -105.6943 93.1758 -105.6943 91.3477 -105.6943 c89.4707 -105.6943 88.292 -105.6943 87.3545 -105.6289 c87.4746 -107.2031 87.5469 -108.2529 87.5469 -111.5332 c87.5469 -114.6172 87.5225 -117.7012 87.3545 -120.7627 c87.6904 -120.6973 87.9795 -120.6309 88.6289 -120.6309 c89.3271 -120.6309 89.6152 -120.6973 90.0244 -120.7627 c89.9043 -118.6416 89.832 -117.0449 89.8555 -114.0264 c90.2412 -114.0488 90.626 -114.0703 91.0107 -114.0703 c92.4785 -114.0703 94.5234 -113.8955 95.7979 -113.1523 c96.7842 -112.583 98.1074 -111.4902 98.1074 -109.5 cf*U*u0 D102.5098 -112.168 m103.1348 -111.1396 104.4346 -110.0244 106.7441 -110.0244 c110.6895 -110.0244 110.8818 -112.583 110.8818 -113.8301 c110.8818 -114.0488 110.7852 -117.7441 110.7852 -118.4883 c110.7852 -118.9033 110.8096 -120.4346 110.8574 -120.7627 c110.5205 -120.6748 110.2324 -120.6309 109.6309 -120.6309 c109.0049 -120.6309 108.7168 -120.6748 108.3555 -120.7627 c108.5723 -118.4229 108.5723 -116.0166 108.5723 -115.623 c108.5723 -113.4365 108.4521 -111.3584 105.7813 -111.3584 c104.6025 -111.3584 103.8086 -111.8174 103.3281 -112.3203 c102.8701 -112.8018 102.5098 -113.3486 102.5098 -115.3389 c102.5098 -118.5322 102.582 -119.4502 102.6777 -120.7627 c102.3174 -120.6748 101.9561 -120.6309 101.3789 -120.6309 c100.8018 -120.6309 100.4893 -120.6748 100.1279 -120.7627 c100.2246 -118.9912 100.2969 -116.8701 100.2969 -115.0986 c100.2969 -110.3525 L100.2969 -107.4004 100.248 -106.5254 100.1758 -104.623 c100.5127 -104.667 100.8496 -104.7539 101.4268 -104.7539 c101.9805 -104.7539 102.3652 -104.667 102.7266 -104.623 c102.7021 -104.9512 102.6064 -106.3506 102.6064 -107.0723 c102.582 -108.9531 102.582 -109.1494 102.5576 -110.0459 C102.5098 -112.168 lf*U*u116.1982 -118.8818 m115.4766 -117.3291 114.3457 -114.8574 113.624 -113.3047 c112.9258 -111.752 112.7822 -111.4463 112.0596 -110.0898 c112.4688 -110.1777 112.8301 -110.2217 113.5752 -110.2217 c114.1045 -110.2217 114.3936 -110.2217 114.875 -110.0898 c115.0908 -110.6807 116.6553 -114.6611 117.8818 -117.3506 c118.0498 -117.7227 118.2422 -118.0947 118.3867 -118.0947 c118.6514 -118.0947 120.6484 -113.6553 121.8027 -110.0898 c122.0674 -110.1563 122.4287 -110.2217 122.8613 -110.2217 c123.3184 -110.2217 123.6309 -110.1563 123.8242 -110.0898 c123.3906 -110.7021 123.1748 -111.1182 121.2734 -114.9014 c121.0088 -115.4268 120.7441 -115.9512 120.4561 -116.4756 c118.8203 -119.7129 117.0879 -123.124 116.0293 -126.3828 c115.8613 -126.3174 115.5479 -126.252 115.1875 -126.252 c114.875 -126.252 114.5381 -126.2959 114.1045 -126.3828 c115.1631 -124.5898 116.1982 -122.8398 117.1602 -121.0469 C116.1982 -118.8818 lf*U*u131.4736 -112.5615 m131.3779 -112.2334 131.2334 -111.6865 130.5352 -111.249 c130.0303 -110.9209 129.3564 -110.877 128.9717 -110.877 c127.5049 -110.877 126.7344 -111.5771 126.7344 -112.5176 c126.7344 -113.7861 128.1543 -114.2451 128.9961 -114.4424 c131.1367 -114.9453 132.8691 -115.3604 132.8691 -117.5479 c132.8691 -119.21 131.5938 -121.0684 128.25 -121.0684 c126.3018 -121.0684 124.9541 -120.3252 124.6895 -120.1504 c125.0029 -119.625 125.1953 -118.6846 125.2432 -118.4004 c125.5322 -118.335 L125.7002 -118.707 125.9404 -119.2969 126.8311 -119.7783 c127.4326 -120.1064 128.0576 -120.1943 128.5869 -120.1943 c129.8379 -120.1943 131.0166 -119.6475 131.0166 -118.4004 c131.0166 -117.1543 130.1992 -116.9131 127.6729 -116.1699 c126.6387 -115.8633 124.9307 -115.1855 124.9307 -113.2607 c124.9307 -112.0146 125.7725 -110.0029 129.0918 -110.0029 c130.752 -110.0029 131.7148 -110.4619 132.2676 -110.7246 c132.0273 -111.293 131.8584 -111.8174 131.7861 -112.5615 C131.4736 -112.5615 lf*U*u135.7793 -110.1777 m136.1162 -110.2656 136.4053 -110.3086 136.958 -110.3086 c137.5117 -110.3086 137.8486 -110.2656 138.209 -110.1777 c138.1367 -111.3809 138.0654 -112.3643 138.0654 -115.9297 c138.0654 -116.9355 138.0889 -117.3066 138.2334 -120.7627 c137.9209 -120.6748 137.6797 -120.6309 137.0547 -120.6309 c136.3809 -120.6309 136.1641 -120.6748 135.8037 -120.7627 c135.8994 -119.1006 135.9717 -116.9131 135.9717 -115.208 c135.9717 -112.7148 135.876 -111.3145 135.7793 -110.1777 cf137.0547 -107.7715 m136.3574 -107.7715 135.7559 -107.2471 135.7559 -106.5908 c135.7559 -105.9131 136.3574 -105.3877 137.0547 -105.3877 c137.7764 -105.3877 138.3779 -105.9131 138.3779 -106.5908 c138.3779 -107.2471 137.7764 -107.7715 137.0547 -107.7715 cf*U*u151.1758 -118.9258 m150.959 -119.5156 150.9355 -119.8877 150.9111 -120.1943 c150.1895 -120.6309 148.9385 -121.0469 147.3506 -121.0469 c142.7803 -121.0469 140.9756 -118.3135 140.9756 -115.5352 c140.9756 -112.1895 143.3574 -109.9805 147.3271 -109.9805 c148.7461 -109.9805 150.0938 -110.2217 151.2959 -110.8555 c150.9355 -111.6865 150.8389 -112.2988 150.7666 -112.7148 c150.4785 -112.7148 L149.7803 -111.0957 148.4092 -110.8994 147.543 -110.8994 c144.873 -110.8994 143.4775 -112.627 143.4775 -115.3604 c143.4775 -119.3848 146.292 -120.041 147.6875 -120.041 c148.6738 -120.041 150.0938 -119.7129 150.959 -118.8594 C151.1758 -118.9258 lf*U*u159.7646 -117.7012 m159.7646 -118.9033 158.4414 -119.7783 157.2139 -119.7783 c156.3721 -119.7783 155.1689 -119.3633 155.1689 -117.9414 c155.1689 -116.7607 155.626 -115.8633 159.7646 -115.2949 c159.7646 -117.7012 Lf1 D154.375 -112.7578 m154.5918 -112.2988 155.1211 -111.1396 157.1182 -111.1396 c158.6816 -111.1396 159.8125 -112.0361 159.8125 -113.5234 c159.8125 -114.1357 159.5957 -114.4199 158.9219 -114.5732 C156.8291 -114.9893 l154.8809 -115.3828 152.8359 -115.7979 152.8359 -118.1162 c152.8359 -119.3193 153.6777 -121.0254 156.1553 -121.0254 c158.0322 -121.0254 159.042 -120.1943 159.7881 -119.4941 c160.0527 -120.4785 160.8223 -120.916 161.6162 -120.916 c162.29 -120.916 162.8193 -120.6748 163.3486 -120.4346 C163.3242 -119.8223 l163.2041 -119.8662 163.0117 -119.9316 162.7236 -119.9316 c161.833 -119.9316 161.833 -119.2969 161.833 -117.373 c161.833 -116.8037 161.9297 -114.0703 161.9297 -113.4365 c161.9297 -112.1025 161.4961 -111.4678 160.9434 -110.9863 c159.9805 -110.1777 158.6572 -110.0029 157.7197 -110.0029 c155.7471 -110.0029 154.5674 -110.79 153.8223 -111.3369 C153.7256 -112.7578 l154.375 -112.7578 Lf*U*u0 D165.5137 -104.623 m165.9229 -104.6885 166.3076 -104.7539 166.7646 -104.7539 c167.1973 -104.7539 167.6064 -104.6885 168.04 -104.623 c167.9189 -107.7939 167.8711 -109.04 167.8711 -112.8242 c167.8711 -116.2578 167.9189 -117.7012 168.0635 -120.7627 c167.7031 -120.6748 167.4141 -120.6094 166.7646 -120.6094 c166.1631 -120.6094 165.8984 -120.6748 165.5381 -120.7627 c165.6816 -118.5537 165.6816 -117.9414 165.6816 -112.3428 c165.6582 -107.3564 165.6582 -106.8096 165.5137 -104.623 cf*U*u185.7451 -108.4063 m185.4326 -107.5752 184.6143 -106.3721 182.4014 -106.3721 c179.7793 -106.3721 179.3223 -108.1221 179.3223 -108.8877 c179.3223 -110.6152 180.9102 -111.2051 182.1367 -111.6426 c184.7588 -112.5615 185.2158 -112.7148 186.0576 -113.3486 c187.165 -114.1582 187.4053 -115.3174 187.4053 -116.1484 c187.4053 -118.4229 185.6494 -121.0254 181.3672 -121.0254 c179.7793 -121.0254 178.2393 -120.6748 176.9883 -119.8223 c177.3496 -118.707 177.3975 -118.0508 177.4219 -117.7666 c177.7344 -117.7666 L178.4316 -119.0781 179.8516 -120.041 181.752 -120.041 c184.2783 -120.041 185.3125 -118.5322 185.3125 -117.1318 c185.3125 -115.3604 183.9414 -114.7051 182.3291 -114.1143 c179.5146 -113.043 179.2021 -112.9336 178.5527 -112.4082 c177.7344 -111.7959 177.3496 -110.7021 177.3496 -109.6963 c177.3496 -106.875 179.8516 -105.4541 182.6904 -105.4541 c184.5664 -105.4541 186.2021 -106.1094 186.7803 -106.46 c186.5869 -106.7881 186.1543 -107.6621 186.082 -108.4063 C185.7451 -108.4063 lf*U*u199.7461 -118.9258 m199.5303 -119.5156 199.5059 -119.8877 199.4814 -120.1943 c198.7598 -120.6309 197.5088 -121.0469 195.9209 -121.0469 c191.3506 -121.0469 189.5459 -118.3135 189.5459 -115.5352 c189.5459 -112.1895 191.9277 -109.9805 195.8975 -109.9805 c197.3164 -109.9805 198.6641 -110.2217 199.8662 -110.8555 c199.5059 -111.6865 199.4092 -112.2988 199.3369 -112.7148 c199.0488 -112.7148 L198.3506 -111.0957 196.9795 -110.8994 196.1143 -110.8994 c193.4434 -110.8994 192.0479 -112.627 192.0479 -115.3604 c192.0479 -119.3848 194.8633 -120.041 196.2578 -120.041 c197.2441 -120.041 198.6641 -119.7129 199.5303 -118.8594 C199.7461 -118.9258 lf*U*u202.1035 -110.1777 m202.4404 -110.2656 202.7295 -110.3086 203.2822 -110.3086 c203.8359 -110.3086 204.1729 -110.2656 204.5332 -110.1777 c204.4609 -111.3809 204.3896 -112.3643 204.3896 -115.9297 c204.3896 -116.9355 204.4131 -117.3066 204.5576 -120.7627 c204.2451 -120.6748 204.0039 -120.6309 203.3789 -120.6309 c202.7051 -120.6309 202.4883 -120.6748 202.1279 -120.7627 c202.2236 -119.1006 202.2959 -116.9131 202.2959 -115.208 c202.2959 -112.7148 202.2002 -111.3145 202.1035 -110.1777 cf203.3789 -107.7715 m202.6816 -107.7715 202.0801 -107.2471 202.0801 -106.5908 c202.0801 -105.9131 202.6816 -105.3877 203.3789 -105.3877 c204.1006 -105.3877 204.7021 -105.9131 204.7021 -106.5908 c204.7021 -107.2471 204.1006 -107.7715 203.3789 -107.7715 cf*U*u209.8018 -114.5293 m210.0186 -112.3428 211.0293 -110.8994 213.1221 -110.8994 c216.0088 -110.8994 216.0088 -113.8076 216.0088 -114.5293 c209.8018 -114.5293 Lf1 D218.4141 -115.4482 m218.4385 -114.2676 218.5107 -110.0244 213.1455 -110.0244 c209.2002 -110.0244 207.3721 -112.5615 207.3721 -115.5791 c207.3721 -118.9473 209.6094 -121.0469 213.2666 -121.0469 c215.2148 -121.0469 216.6826 -120.5439 217.7412 -119.625 c217.7646 -119.2754 217.7646 -118.9258 217.9092 -118.3135 C217.6201 -118.2471 l217.2598 -118.707 216.1533 -120.0186 213.7959 -120.0186 c213.0977 -120.0186 211.5342 -119.9531 210.4277 -118.3135 c209.7783 -117.3066 209.7783 -116.0605 209.7783 -115.4482 c218.4141 -115.4482 Lf*U*u0 D221.1563 -110.0898 m221.5898 -110.1563 221.9023 -110.2217 222.3594 -110.2217 c222.8164 -110.2217 223.1289 -110.1563 223.5381 -110.0898 c223.5146 -110.418 223.4424 -111.8613 223.418 -112.168 c224.0439 -111.1396 225.3662 -110.0244 227.6523 -110.0244 c231.5977 -110.0244 231.79 -112.583 231.79 -113.8301 c231.79 -114.0488 231.6934 -117.7441 231.6934 -118.4883 c231.6934 -118.9033 231.7178 -120.4346 231.7656 -120.7627 c231.4287 -120.6748 231.1406 -120.6309 230.5391 -120.6309 c229.9131 -120.6309 229.625 -120.6748 229.2637 -120.7627 c229.4805 -118.4229 229.4805 -116.0166 229.4805 -115.623 c229.4805 -113.4365 229.3604 -111.3584 226.6895 -111.3584 c225.415 -111.3584 224.4043 -111.8838 223.8271 -112.8672 c223.3936 -113.6328 223.3936 -116.1045 223.3936 -117.1318 c223.3936 -118.8379 223.5146 -119.9531 223.5869 -120.7627 c223.25 -120.6973 222.8643 -120.6309 222.3115 -120.6309 c221.7578 -120.6309 221.3975 -120.6973 221.0361 -120.7627 c221.1572 -119.4287 221.2773 -118.0283 221.2773 -114.748 c221.2773 -113.3047 221.2051 -111.6211 221.1563 -110.0898 cf*U*u244.6123 -118.9258 m244.3955 -119.5156 244.3711 -119.8877 244.3477 -120.1943 c243.626 -120.6309 242.375 -121.0469 240.7871 -121.0469 c236.2158 -121.0469 234.4121 -118.3135 234.4121 -115.5352 c234.4121 -112.1895 236.793 -109.9805 240.7627 -109.9805 c242.1826 -109.9805 243.5293 -110.2217 244.7324 -110.8555 c244.3711 -111.6865 244.2754 -112.2988 244.2031 -112.7148 c243.9141 -112.7148 L243.2168 -111.0957 241.8457 -110.8994 240.9795 -110.8994 c238.3086 -110.8994 236.9141 -112.627 236.9141 -115.3604 c236.9141 -119.3848 239.7285 -120.041 241.124 -120.041 c242.1104 -120.041 243.5293 -119.7129 244.3955 -118.8594 C244.6123 -118.9258 lf*U*u248.4609 -114.5293 m248.6777 -112.3428 249.6875 -110.8994 251.7803 -110.8994 c254.668 -110.8994 254.668 -113.8076 254.668 -114.5293 c248.4609 -114.5293 Lf1 D257.0732 -115.4482 m257.0977 -114.2676 257.1699 -110.0244 251.8047 -110.0244 c247.8594 -110.0244 246.0313 -112.5615 246.0313 -115.5791 c246.0313 -118.9473 248.2686 -121.0469 251.9248 -121.0469 c253.874 -121.0469 255.3408 -120.5439 256.3994 -119.625 c256.4238 -119.2754 256.4238 -118.9258 256.5684 -118.3135 C256.2793 -118.2471 l255.9189 -118.707 254.8115 -120.0186 252.4541 -120.0186 c251.7568 -120.0186 250.1934 -119.9531 249.0859 -118.3135 c248.4365 -117.3066 248.4365 -116.0605 248.4365 -115.4482 c257.0732 -115.4482 Lf*U*u0 D265.7578 -112.5615 m265.6611 -112.2334 265.5166 -111.6865 264.8193 -111.249 c264.3145 -110.9209 263.6406 -110.877 263.2559 -110.877 c261.7881 -110.877 261.0186 -111.5771 261.0186 -112.5176 c261.0186 -113.7861 262.4375 -114.2451 263.2803 -114.4424 c265.4209 -114.9453 267.1533 -115.3604 267.1533 -117.5479 c267.1533 -119.21 265.8779 -121.0684 262.5342 -121.0684 c260.585 -121.0684 259.2383 -120.3252 258.9736 -120.1504 c259.2861 -119.625 259.4785 -118.6846 259.5273 -118.4004 c259.8154 -118.335 L259.9844 -118.707 260.2246 -119.2969 261.1143 -119.7783 c261.7158 -120.1064 262.3418 -120.1943 262.8711 -120.1943 c264.1221 -120.1943 265.3008 -119.6475 265.3008 -118.4004 c265.3008 -117.1543 264.4824 -116.9131 261.957 -116.1699 c260.9219 -115.8633 259.2139 -115.1855 259.2139 -113.2607 c259.2139 -112.0146 260.0557 -110.0029 263.376 -110.0029 c265.0361 -110.0029 265.998 -110.4619 266.5518 -110.7246 c266.3105 -111.293 266.1426 -111.8174 266.0703 -112.5615 C265.7578 -112.5615 lf*U*u4.9487 -133.7773 m4.9487 -136.8174 1.6289 -136.9482 0.5464 -136.9922 c-0.0313 -137.0137 -0.2715 -137.0137 -0.7285 -136.9707 c-0.7285 -136.5107 -0.7529 -134.9805 -0.7529 -133.9746 c-0.7529 -132.9902 -0.7529 -131.9844 -0.7046 -131 c-0.3921 -130.9561 0.1133 -130.8906 0.811 -130.8906 c2.5674 -130.8906 4.9487 -131.2188 4.9487 -133.7773 cf1 D8.9424 -144.7998 m8.6533 -144.4277 3.6255 -138.6982 2.7354 -137.4512 c4.2031 -137.2109 7.4507 -136.6641 7.4507 -133.5371 c7.4507 -132.4873 7.1382 -131.5908 6.2236 -130.9121 c5.4297 -130.3223 4.54 -129.9941 1.6772 -129.9941 c1.292 -129.9941 -0.6807 -130.0156 -1.1138 -130.0156 c-1.6187 -130.0156 -2.2925 -130.0156 -3.2065 -129.9287 c-3.1343 -132.3779 -3.062 -134.6523 -3.062 -136.6865 c-3.062 -139.8789 -3.1104 -142.4814 -3.2305 -145.0625 c-2.8696 -144.9961 -2.605 -144.9307 -1.9556 -144.9307 c-1.5225 -144.9307 -0.9692 -144.9746 -0.5601 -145.0625 c-0.7529 -141.5635 -0.7285 -139.2891 -0.7285 -137.7363 C-0.103 -137.7363 l1.749 -139.7256 3.5054 -141.7813 5.791 -145.0625 c6.4644 -144.9961 7.0176 -144.9307 7.5229 -144.9307 c8.0522 -144.9307 8.437 -144.9961 8.9424 -145.0625 c8.9424 -144.7998 Lf*U*u0 D11.7085 -138.8291 m11.9248 -136.6426 12.9355 -135.1992 15.0283 -135.1992 c17.915 -135.1992 17.915 -138.1074 17.915 -138.8291 c11.7085 -138.8291 Lf1 D20.3208 -139.748 m20.3447 -138.5674 20.417 -134.3242 15.0522 -134.3242 c11.1069 -134.3242 9.2788 -136.8613 9.2788 -139.8789 c9.2788 -143.2471 11.5161 -145.3467 15.1729 -145.3467 c17.1211 -145.3467 18.5889 -144.8438 19.6475 -143.9248 c19.6714 -143.5752 19.6714 -143.2256 19.8154 -142.6133 C19.5269 -142.5469 l19.166 -143.0068 18.0596 -144.3184 15.7021 -144.3184 c15.0044 -144.3184 13.4404 -144.2529 12.334 -142.6133 c11.6846 -141.6064 11.6846 -140.3604 11.6846 -139.748 c20.3208 -139.748 Lf*U*u0 D29.0054 -136.8613 m28.9092 -136.5332 28.7646 -135.9863 28.0669 -135.5488 c27.562 -135.2207 26.8882 -135.1768 26.5034 -135.1768 c25.0356 -135.1768 24.2661 -135.877 24.2661 -136.8174 c24.2661 -138.0859 25.6855 -138.5449 26.5273 -138.7422 c28.6685 -139.2451 30.4004 -139.6602 30.4004 -141.8477 c30.4004 -143.5098 29.1255 -145.3682 25.7817 -145.3682 c23.833 -145.3682 22.4858 -144.625 22.2212 -144.4502 c22.5342 -143.9248 22.7266 -142.9844 22.7744 -142.7002 c23.063 -142.6348 L23.2314 -143.0068 23.4722 -143.5967 24.3623 -144.0781 c24.9639 -144.4063 25.5894 -144.4932 26.1187 -144.4932 c27.3691 -144.4932 28.5483 -143.9473 28.5483 -142.7002 c28.5483 -141.4541 27.7305 -141.2129 25.2041 -140.4697 c24.1699 -140.1631 22.4619 -139.4854 22.4619 -137.5605 c22.4619 -136.3145 23.3037 -134.3027 26.6235 -134.3027 c28.2837 -134.3027 29.2456 -134.7617 29.7993 -135.0244 c29.5586 -135.5928 29.3901 -136.1172 29.3179 -136.8613 C29.0054 -136.8613 lf*U*u34.8027 -138.8291 m35.019 -136.6426 36.0293 -135.1992 38.1226 -135.1992 c41.0093 -135.1992 41.0093 -138.1074 41.0093 -138.8291 c34.8027 -138.8291 Lf1 D43.415 -139.748 m43.439 -138.5674 43.5112 -134.3242 38.1465 -134.3242 c34.2012 -134.3242 32.3726 -136.8613 32.3726 -139.8789 c32.3726 -143.2471 34.6099 -145.3467 38.2666 -145.3467 c40.2153 -145.3467 41.6826 -144.8438 42.7412 -143.9248 c42.7651 -143.5752 42.7651 -143.2256 42.9097 -142.6133 C42.6211 -142.5469 l42.2603 -143.0068 41.1533 -144.3184 38.7959 -144.3184 c38.0981 -144.3184 36.5347 -144.2529 35.4282 -142.6133 c34.7783 -141.6064 34.7783 -140.3604 34.7783 -139.748 c43.415 -139.748 Lf*U*u0 D51.9551 -142 m51.9551 -143.2031 50.6318 -144.0781 49.4048 -144.0781 c48.563 -144.0781 47.3604 -143.6621 47.3604 -142.2412 c47.3604 -141.0596 47.8174 -140.1631 51.9551 -139.5947 c51.9551 -142 Lf1 D46.5664 -137.0576 m46.7827 -136.5986 47.312 -135.4395 49.3086 -135.4395 c50.8726 -135.4395 52.0029 -136.3359 52.0029 -137.8232 c52.0029 -138.4355 51.7866 -138.7197 51.1128 -138.873 C49.02 -139.2891 l47.0713 -139.6826 45.0264 -140.0977 45.0264 -142.416 c45.0264 -143.6191 45.8687 -145.3242 48.3467 -145.3242 c50.2227 -145.3242 51.2334 -144.4932 51.979 -143.7939 c52.2437 -144.7783 53.0137 -145.2148 53.8071 -145.2148 c54.481 -145.2148 55.0103 -144.9746 55.5396 -144.7344 C55.5156 -144.1221 l55.395 -144.166 55.2026 -144.2314 54.9141 -144.2314 c54.0239 -144.2314 54.0239 -143.5967 54.0239 -141.6729 c54.0239 -141.1035 54.1201 -138.3701 54.1201 -137.7363 c54.1201 -136.4014 53.687 -135.7676 53.1338 -135.2861 c52.1714 -134.4775 50.8481 -134.3027 49.9102 -134.3027 c47.9375 -134.3027 46.7588 -135.0898 46.0127 -135.6367 C45.9165 -137.0576 l46.5664 -137.0576 Lf*U*u0 D64.2002 -136.4678 m63.8867 -136.3145 63.5986 -136.1836 62.9492 -136.1836 c61.5771 -136.1836 60.832 -137.0137 60.5908 -137.4297 c60.2549 -138.1074 60.2061 -138.5889 60.2061 -141.2783 c60.2061 -141.4971 60.2061 -142.2412 60.2305 -142.7002 c60.3271 -144.2314 60.3271 -144.3838 60.3506 -145.0625 c59.9902 -144.9746 59.6768 -144.9307 59.0518 -144.9307 c58.4746 -144.9307 58.21 -144.9746 57.8486 -145.0625 c58.0176 -143.6406 58.1133 -142.8975 58.1133 -139.4854 c58.1133 -137.0137 58.0176 -135.8115 57.9209 -134.3896 c58.2822 -134.4775 58.6182 -134.5215 59.1475 -134.5215 c59.6768 -134.5215 59.9902 -134.4775 60.375 -134.3896 c60.1826 -135.5928 60.1826 -136.4678 60.1826 -136.8613 c60.5908 -135.9863 61.7217 -134.1055 64.5371 -134.3242 c64.4404 -134.6523 64.3203 -135.0898 64.3203 -135.7461 c64.3203 -135.877 64.3203 -136.0078 64.3682 -136.3584 C64.2002 -136.4678 lf*U*u75.6992 -143.2256 m75.4824 -143.8154 75.458 -144.1875 75.4346 -144.4932 c74.7129 -144.9307 73.4619 -145.3467 71.874 -145.3467 c67.3027 -145.3467 65.499 -142.6133 65.499 -139.835 c65.499 -136.4893 67.8799 -134.2803 71.8496 -134.2803 c73.2686 -134.2803 74.6162 -134.5215 75.8193 -135.1553 c75.458 -135.9863 75.3623 -136.5986 75.29 -137.0137 c75.001 -137.0137 L74.3037 -135.3955 72.9326 -135.1992 72.0664 -135.1992 c69.3955 -135.1992 68.001 -136.9268 68.001 -139.6602 c68.001 -143.6846 70.8154 -144.3408 72.2109 -144.3408 c73.1973 -144.3408 74.6162 -144.0127 75.4824 -143.1592 C75.6992 -143.2256 lf*U*u80.2695 -136.4678 m80.8945 -135.4395 82.1943 -134.3242 84.5039 -134.3242 c88.4492 -134.3242 88.6416 -136.8828 88.6416 -138.1299 c88.6416 -138.3486 88.5449 -142.0439 88.5449 -142.7881 c88.5449 -143.2031 88.5693 -144.7344 88.6172 -145.0625 c88.2803 -144.9746 87.9912 -144.9307 87.3906 -144.9307 c86.7646 -144.9307 86.4766 -144.9746 86.1152 -145.0625 c86.332 -142.7217 86.332 -140.3164 86.332 -139.9229 c86.332 -137.7363 86.2119 -135.6582 83.541 -135.6582 c82.3623 -135.6582 81.5684 -136.1172 81.0879 -136.6201 c80.6299 -137.1016 80.2695 -137.6484 80.2695 -139.6387 c80.2695 -142.8311 80.3418 -143.75 80.4375 -145.0625 c80.0771 -144.9746 79.7158 -144.9307 79.1387 -144.9307 c78.5615 -144.9307 78.249 -144.9746 77.8877 -145.0625 c77.9844 -143.291 78.0566 -141.1689 78.0566 -139.3984 c78.0566 -134.6523 L78.0566 -131.7002 78.0078 -130.8252 77.9355 -128.9229 c78.2725 -128.9658 78.6094 -129.0537 79.1865 -129.0537 c79.7402 -129.0537 80.125 -128.9658 80.4863 -128.9229 c80.4619 -129.25 80.3652 -130.6504 80.3652 -131.3721 c80.3418 -133.2529 80.3418 -133.4492 80.3174 -134.3457 C80.2695 -136.4678 lf*U*u112.4336 -142.1318 m112.3125 -142.6348 112.2168 -143.0938 112.1689 -143.9033 c110.3887 -144.8652 108.3193 -145.3242 106.2021 -145.3242 c100.6211 -145.3242 97.374 -142 97.374 -137.4951 c97.374 -133.2744 100.2607 -129.7754 106.5869 -129.7754 c109.498 -129.7754 111.4473 -130.4971 112.5293 -130.9346 c112.1689 -131.8311 112.0723 -132.1152 111.9521 -133.1211 c111.7119 -133.1211 L111.0615 -131.875 108.9453 -130.7158 106.4912 -130.7158 c102.6904 -130.7158 100.1641 -133.2529 100.1641 -137.4736 c100.1641 -142.0225 103.2676 -144.2744 106.6836 -144.2744 c107.7666 -144.2744 110.2686 -144.0566 112.1445 -142.0225 C112.4336 -142.1318 lf*U*u120.3477 -135.1768 m123.4746 -135.1768 124.0518 -138.0859 124.0518 -139.792 c124.0518 -142.6787 122.5361 -144.4932 120.2275 -144.4932 c118.0137 -144.4932 116.5469 -142.8096 116.5469 -139.7695 c116.5469 -139.1133 116.5469 -135.1768 120.3477 -135.1768 cf1 D120.2031 -134.3027 m116.5947 -134.3027 114.0928 -136.4238 114.0928 -139.835 c114.0928 -144.3184 117.6533 -145.3682 120.2031 -145.3682 c123.8594 -145.3682 126.5059 -143.1816 126.5059 -139.7041 c126.5059 -137.0361 124.7734 -134.3027 120.2031 -134.3027 cf*U*u0 D136.9219 -142.3721 m137.3555 -141.585 137.3555 -140.666 137.3555 -140.0537 c137.3555 -138.6328 137.3076 -135.6797 137.2109 -134.3896 c137.5723 -134.4551 138.0049 -134.5215 138.5098 -134.5215 c139.0391 -134.5215 139.3516 -134.4551 139.6885 -134.3896 c139.5928 -135.6797 139.4482 -137.6924 139.4482 -139.9443 c139.4482 -143.2031 139.4961 -143.9248 139.5928 -145.0625 c139.1836 -144.9961 138.8945 -144.9307 138.4141 -144.9307 c137.9805 -144.9307 137.7158 -144.9746 137.2832 -145.0625 c137.3555 -144.4277 137.3555 -144.2744 137.4033 -142.9844 c136.2002 -144.9746 134.3721 -145.2588 133.458 -145.2588 c129.6816 -145.2588 129.3203 -142.6563 129.3203 -141.4541 c129.3203 -140.7979 129.4404 -137.5391 129.4404 -136.7959 c129.4404 -135.9863 129.3926 -134.8486 129.3447 -134.3896 c129.7051 -134.4775 130.042 -134.5215 130.5713 -134.5215 c131.0762 -134.5215 131.4131 -134.4775 131.7744 -134.3896 c131.6299 -135.9863 131.5576 -137.8232 131.5576 -139.0039 c131.5576 -141.585 131.5576 -143.9033 134.1318 -143.9033 c135.6475 -143.9033 136.5371 -143.0723 136.9219 -142.3721 cf*U*u143.4414 -134.3896 m143.874 -134.4551 144.1875 -134.5215 144.6445 -134.5215 c145.1016 -134.5215 145.4141 -134.4551 145.8232 -134.3896 c145.7988 -134.7178 145.7266 -136.1611 145.7031 -136.4678 c146.3281 -135.4395 147.6514 -134.3242 149.9365 -134.3242 c153.8818 -134.3242 154.0742 -136.8828 154.0742 -138.1299 c154.0742 -138.3486 153.9785 -142.0439 153.9785 -142.7881 c153.9785 -143.2031 154.002 -144.7344 154.0508 -145.0625 c153.7139 -144.9746 153.4248 -144.9307 152.8232 -144.9307 c152.1982 -144.9307 151.9092 -144.9746 151.5488 -145.0625 c151.7646 -142.7217 151.7646 -140.3164 151.7646 -139.9229 c151.7646 -137.7363 151.6445 -135.6582 148.9746 -135.6582 c147.6992 -135.6582 146.6895 -136.1836 146.1113 -137.167 c145.6787 -137.9326 145.6787 -140.4043 145.6787 -141.4316 c145.6787 -143.1377 145.7988 -144.2529 145.8711 -145.0625 c145.5342 -144.9961 145.1494 -144.9307 144.5957 -144.9307 c144.043 -144.9307 143.6816 -144.9961 143.3213 -145.0625 c143.4414 -143.7285 143.5615 -142.3281 143.5615 -139.0479 c143.5615 -137.6045 143.4893 -135.9209 143.4414 -134.3896 cf*U*u166.8965 -143.2256 m166.6797 -143.8154 166.6563 -144.1875 166.6318 -144.4932 c165.9102 -144.9307 164.6592 -145.3467 163.0713 -145.3467 c158.501 -145.3467 156.6963 -142.6133 156.6963 -139.835 c156.6963 -136.4893 159.0781 -134.2803 163.0479 -134.2803 c164.4668 -134.2803 165.8145 -134.5215 167.0166 -135.1553 c166.6563 -135.9863 166.5596 -136.5986 166.4873 -137.0137 c166.1992 -137.0137 L165.501 -135.3955 164.1299 -135.1992 163.2637 -135.1992 c160.5938 -135.1992 159.1982 -136.9268 159.1982 -139.6602 c159.1982 -143.6846 162.0127 -144.3408 163.4082 -144.3408 c164.3945 -144.3408 165.8145 -144.0127 166.6797 -143.1592 C166.8965 -143.2256 lf*U*u169.2539 -134.4775 m169.5908 -134.5645 169.8799 -134.6084 170.4326 -134.6084 c170.9863 -134.6084 171.3232 -134.5645 171.6836 -134.4775 c171.6113 -135.6797 171.5391 -136.6641 171.5391 -140.2285 c171.5391 -141.2354 171.5635 -141.6064 171.708 -145.0625 c171.3955 -144.9746 171.1543 -144.9307 170.5293 -144.9307 c169.8555 -144.9307 169.6387 -144.9746 169.2783 -145.0625 c169.374 -143.4004 169.4463 -141.2129 169.4463 -139.5068 c169.4463 -137.0137 169.3506 -135.6143 169.2539 -134.4775 cf170.5293 -132.0713 m169.8311 -132.0713 169.2295 -131.5469 169.2295 -130.8906 c169.2295 -130.2129 169.8311 -129.6875 170.5293 -129.6875 c171.251 -129.6875 171.8525 -130.2129 171.8525 -130.8906 c171.8525 -131.5469 171.251 -132.0713 170.5293 -132.0713 cf*U*u175.4121 -128.9229 m175.8213 -128.9883 176.2061 -129.0537 176.6631 -129.0537 c177.0967 -129.0537 177.5059 -128.9883 177.9385 -128.9229 c177.8184 -132.0938 177.7705 -133.3398 177.7705 -137.123 c177.7705 -140.5566 177.8184 -142 177.9629 -145.0625 c177.6016 -144.9746 177.3135 -144.9092 176.6631 -144.9092 c176.0625 -144.9092 175.7979 -144.9746 175.4365 -145.0625 c175.5811 -142.8535 175.5811 -142.2412 175.5811 -136.6426 c175.5566 -131.6563 175.5566 -131.1094 175.4121 -128.9229 cf*U800 Ar0 R0 0 0 0.2 K0.0541 w 3.8637 M1 XR106.6709 -67.502 mB1 0 0.5 0 (PANTONE 3272 CVC) 0 x1 w 4 M0 XR1.7012 -80.6797 m172.7412 -80.6797 L173.667 -80.6797 174.417 -81.4238 174.417 -82.3408 c174.417 -83.2578 173.667 -84.0029 172.7412 -84.0029 c1.7012 -84.0029 L0.7744 -84.0029 0.0234 -83.2578 0.0234 -82.3408 c0.0234 -81.4238 0.7744 -80.6797 1.7012 -80.6797 c1.7012 -80.6797 Lf1.7012 -25.5107 m172.7412 -25.5107 L173.667 -25.5107 174.417 -26.2539 174.417 -27.1714 c174.417 -28.0889 173.667 -28.832 172.7412 -28.832 c1.7012 -28.832 L0.7744 -28.832 0.0234 -28.0889 0.0234 -27.1714 c0.0234 -26.2539 0.7744 -25.5107 1.7012 -25.5107 c1.7012 -25.5107 Lf300 Ar0.6 1 0.5 0 (PANTONE 222 CVC) 0 x0.6831 -52.3628 m6.1577 -52.3628 l8.4292 -52.3618 8.4292 -54.8008 V8.4551 -56.9507 6.2207 -57.0791 V0.6699 -57.0791 L0.6699 -69.6069 l1.0322 -74.0576 5.6392 -74.0576 v10.2471 -74.0576 27.71 -74.0576 y27.71 -68.6118 l10.0044 -68.6118 l10.0044 -57.1924 l26.3877 -57.1924 l26.3877 -52.2573 l10.0044 -52.2573 l10.0044 -40.8384 l27.71 -40.8384 l27.71 -35.3916 l5.2129 -35.3916 l1.4297 -35.3916 0.6763 -39.6582 V0.6831 -52.3628 lf*u52.3477 -35.394 m67.0439 -35.6211 66.0322 -46.5332 y66.2549 -57.7637 52.749 -57.1821 52.418 -57.1821 c45.3291 -57.1821 l45.3291 -74.0649 l36.0591 -74.0649 l36.0591 -57.0781 l41.5757 -57.0781 L43.8452 -56.9204 43.7754 -54.7383 Y43.7236 -52.416 41.5581 -52.3638 y36.0591 -52.3638 l36.0591 -35.394 l52.3477 -35.394 lf1 D45.3408 -40.8335 m45.3408 -52.2397 l52.2925 -52.2397 l56.5537 -52.0088 56.7656 -46.6323 V56.9375 -41.2559 52.0425 -40.8335 V45.3408 -40.8335 lf*U800 Ar0 D1 XR98.2451 -37.9565 m97.3916 -37.4697 90.9902 -34.7202 86.0508 -34.7202 c76.8389 -34.7202 70.7314 -39.5664 70.9053 -46.6187 c71.2275 -59.6494 92.1865 -57.6938 91.1377 -65.9063 c90.3926 -71.7437 76.0938 -70.4536 71.1924 -65.6108 c69.876 -71.3135 l77.8701 -76.5005 97.7393 -77.0044 99.0186 -63.8623 c100.3135 -50.5854 78.4424 -50.5083 78.4424 -43.9761 c78.4424 -40.8223 81.3643 -39.4009 86.3252 -39.5327 c92.7998 -39.7041 94.8916 -42.4849 96.2393 -43.2295 c98.2451 -37.9565 lf*u300 Ar0 XR122.2891 -35.3843 m130.3916 -35.3843 136.8447 -38.7969 136.2305 -47.6694 c135.6162 -56.5415 125.8789 -56.9609 y138.7041 -74.2808 l126.8447 -74.2808 l115.583 -57.9849 l115.583 -74.0522 l106.3115 -74.0522 l106.3115 -57.0757 l112.3115 -57.0757 L114.3037 -57.0757 114.417 -54.7998 Y114.417 -52.4678 112.3115 -52.3535 y106.3115 -52.3535 l106.3115 -35.377 l122.2891 -35.3843 lf1 D115.5889 -40.8428 m115.5889 -52.2158 l122.4014 -52.2158 l127.0166 -52.1919 127.0166 -46.3379 v127.0166 -40.7573 121.6338 -40.7998 122.4863 -40.8501 c115.5889 -40.8428 lf*U800 Ar0 D1 XR173.3701 -38.1318 m169.6318 -35.5234 165.6475 -34.5537 161.5088 -34.6255 c149.8076 -34.8291 141.4336 -44.0244 141.3252 -54.7432 c141.2158 -65.6094 149.415 -74.2705 161.4932 -74.8267 c165.6279 -75.0171 170.4756 -73.8594 174.1904 -71.0596 c171.3232 -66.4507 l167.6064 -69.6333 164.499 -70.4556 161.2725 -69.748 c154.8682 -68.3472 150.4834 -61.7075 150.7295 -54.7441 c150.833 -51.8916 151.2432 -49.1279 152.3506 -46.7798 c154.3643 -42.5142 157.1787 -40.3066 161.1533 -39.6831 c164.6064 -39.1411 167.501 -39.6333 170.6045 -42.4336 c173.3701 -38.1318 lfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF